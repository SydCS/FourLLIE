24-01-12 15:33:15.039 - INFO:   name: DW
  use_tb_logger: False
  model: enhancement_model
  distortion: sr
  scale: 1
  gpu_ids: [0]
  datasets:[
    train:[
      name: ll_dataset
      interval_list: [1]
      random_reverse: False
      border_mode: False
      dataroot_GT: /root/autodl-fs/Training data/Huawei/high
      dataroot_LQ: /root/autodl-fs/Training data/Huawei/low
      n_workers: 3
      batch_size: 16
      GT_size: 384
      LQ_size: 384
      use_flip: True
      use_rot: True
      color: RGB
      phase: train
      scale: 1
      data_type: img
    ]
    val:[
      name: ll_dataset
      dataroot_GT: /root/autodl-fs/Eval/Huawei/high
      dataroot_LQ: /root/autodl-fs/Eval/Huawei/low
      train_size: [600, 400]
      phase: val
      scale: 1
      data_type: img
    ]
  ]
  network_G:[
    which_model_G: FourLLIE
    nf: 16
    scale: 1
  ]
  path:[
    root: ./
    strict_load: False
    experiments_root: ./experiments/DW
    models: ./experiments/DW/models
    training_state: ./experiments/DW/training_state
    log: ./experiments/DW
    val_images: ./experiments/DW/val_images
  ]
  train:[
    lr_G: 0.0001
    lr_scheme: MultiStepLR
    beta1: 0.9
    beta2: 0.99
    niter: 100000
    lr_steps: [15000, 22000, 30000, 50000, 80000]
    ft_tsa_only: 0
    warmup_iter: 200
    lr_gamma: 0.5
    eta_min: 1e-07
    pixel_criterion: l2
    pixel_weight: 1.0
    val_freq: 1000.0
    manual.resize960x512_seed: 0
  ]
  logger:[
    print_freq: 1000
    save_checkpoint_freq: 1000.0
  ]
  is_train: True
  dist: False

24-01-12 15:33:15.039 - INFO: Random seed: 609
24-01-12 15:33:15.105 - INFO: Dataset [ll_dataset - ll_dataset] is created.
24-01-12 15:33:15.106 - INFO: Number of train images: 2,450, iters: 154
24-01-12 15:33:15.106 - INFO: Total epochs needed: 650 for iters 100,000
24-01-12 15:33:15.109 - INFO: Dataset [ll_dataset - ll_dataset] is created.
24-01-12 15:33:15.109 - INFO: Number of val images in [ll_dataset]: 30
24-01-12 15:33:16.573 - INFO: Network G structure: DataParallel - FourLLIE, with parameters: 117,718
24-01-12 15:33:16.573 - INFO: FourLLIE(
  (AmpNet): Sequential(
    (0): AmplitudeNet_skip(
      (conv0): Sequential(
        (0): Conv2d(3, 8, kernel_size=(1, 1), stride=(1, 1))
        (1): ProcessBlock(
          (spatial_process): SpaBlock(
            (block): Sequential(
              (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
          (frequency_process): FreBlock(
            (fpre): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
            (process1): Sequential(
              (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
            )
            (process2): Sequential(
              (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (cat): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (conv1): ProcessBlock(
        (spatial_process): SpaBlock(
          (block): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): LeakyReLU(negative_slope=0.1, inplace=True)
            (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): LeakyReLU(negative_slope=0.1, inplace=True)
          )
        )
        (frequency_process): FreBlock(
          (fpre): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
          (process1): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
            (1): LeakyReLU(negative_slope=0.1, inplace=True)
            (2): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
          )
          (process2): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
            (1): LeakyReLU(negative_slope=0.1, inplace=True)
            (2): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (cat): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv2): ProcessBlock(
        (spatial_process): SpaBlock(
          (block): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): LeakyReLU(negative_slope=0.1, inplace=True)
            (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): LeakyReLU(negative_slope=0.1, inplace=True)
          )
        )
        (frequency_process): FreBlock(
          (fpre): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
          (process1): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
            (1): LeakyReLU(negative_slope=0.1, inplace=True)
            (2): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
          )
          (process2): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
            (1): LeakyReLU(negative_slope=0.1, inplace=True)
            (2): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (cat): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv3): ProcessBlock(
        (spatial_process): SpaBlock(
          (block): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (1): LeakyReLU(negative_slope=0.1, inplace=True)
            (2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): LeakyReLU(negative_slope=0.1, inplace=True)
          )
        )
        (frequency_process): FreBlock(
          (fpre): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
          (process1): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
            (1): LeakyReLU(negative_slope=0.1, inplace=True)
            (2): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
          )
          (process2): Sequential(
            (0): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=8)
            (1): LeakyReLU(negative_slope=0.1, inplace=True)
            (2): Conv2d(8, 8, kernel_size=(1, 1), stride=(1, 1))
          )
        )
        (cat): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv4): Sequential(
        (0): ProcessBlock(
          (spatial_process): SpaBlock(
            (block): Sequential(
              (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
          (frequency_process): FreBlock(
            (fpre): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
            (process1): Sequential(
              (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
            )
            (process2): Sequential(
              (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (cat): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
      )
      (conv5): Sequential(
        (0): ProcessBlock(
          (spatial_process): SpaBlock(
            (block): Sequential(
              (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
          (frequency_process): FreBlock(
            (fpre): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
            (process1): Sequential(
              (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
            )
            (process2): Sequential(
              (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (cat): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Conv2d(16, 8, kernel_size=(1, 1), stride=(1, 1))
      )
      (convout): Sequential(
        (0): ProcessBlock(
          (spatial_process): SpaBlock(
            (block): Sequential(
              (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              (3): LeakyReLU(negative_slope=0.1, inplace=True)
            )
          )
          (frequency_process): FreBlock(
            (fpre): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
            (process1): Sequential(
              (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
            )
            (process2): Sequential(
              (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
              (1): LeakyReLU(negative_slope=0.1, inplace=True)
              (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (cat): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): Conv2d(16, 3, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (1): Sigmoid()
  )
  (conv_first_1): Conv2d(6, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_first_2): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (conv_first_3): Conv2d(16, 16, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
  (feature_extraction): Sequential(
    (0): ResidualBlock_noBN(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (recon_trunk): Sequential(
    (0): ResidualBlock_noBN(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
  (upconv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (upconv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (pixel_shuffle): PixelShuffle(upscale_factor=2)
  (HRconv): Conv2d(32, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(16, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.1, inplace=True)
  (transformer): SFNet(
    (conv1): ProcessBlock(
      (spatial_process): Identity()
      (frequency_process): FreBlock(
        (fpre): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        (process1): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
        (process2): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (cat): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv2): ProcessBlock(
      (spatial_process): Identity()
      (frequency_process): FreBlock(
        (fpre): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        (process1): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
        (process2): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (cat): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv3): ProcessBlock(
      (spatial_process): Identity()
      (frequency_process): FreBlock(
        (fpre): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        (process1): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
        (process2): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (cat): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv4): ProcessBlock(
      (spatial_process): Identity()
      (frequency_process): FreBlock(
        (fpre): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        (process1): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
        (process2): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (cat): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
    )
    (conv5): ProcessBlock(
      (spatial_process): Identity()
      (frequency_process): FreBlock(
        (fpre): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        (process1): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
        (process2): Sequential(
          (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16)
          (1): LeakyReLU(negative_slope=0.1, inplace=True)
          (2): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
        )
      )
      (cat): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (recon_trunk_light): Sequential(
    (0): ResidualBlock_noBN(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (1): ResidualBlock_noBN(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (2): ResidualBlock_noBN(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (3): ResidualBlock_noBN(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (4): ResidualBlock_noBN(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (5): ResidualBlock_noBN(
      (conv1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (conv2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
)
24-01-12 15:33:18.350 - INFO: Model [enhancement_model] is created.
24-01-12 15:33:18.350 - INFO: Start training from epoch: 0, iter: 0
24-01-12 15:42:36.700 - INFO: [epoch:  6, iter:   1,000, lr:(9.950e-05,)] l_pix: 1.5380e+05 l_amp: 2.9112e+08 l_vgg: 1.2039e+06 
24-01-12 15:43:06.590 - INFO: # Validation # PSNR: 1.8501e+01: best psnr : 1.8501e+01
24-01-12 15:43:06.591 - INFO: # Validation # SSIM: 5.5445e-01: best ssim : 5.5445e-01
24-01-12 15:43:06.591 - INFO: Saving models and training states.
24-01-12 15:52:22.277 - INFO: [epoch: 13, iter:   2,000, lr:(9.950e-05,)] l_pix: 1.7715e+05 l_amp: 3.1710e+08 l_vgg: 1.3188e+06 
24-01-12 15:52:51.296 - INFO: # Validation # PSNR: 1.9156e+01: best psnr : 1.9156e+01
24-01-12 15:52:51.297 - INFO: # Validation # SSIM: 5.7201e-01: best ssim : 5.7201e-01
24-01-12 15:52:51.297 - INFO: Saving models and training states.
24-01-12 16:02:03.806 - INFO: [epoch: 19, iter:   3,000, lr:(9.950e-05,)] l_pix: 1.1263e+05 l_amp: 1.4592e+08 l_vgg: 1.2057e+06 
24-01-12 16:02:32.002 - INFO: # Validation # PSNR: 1.9351e+01: best psnr : 1.9351e+01
24-01-12 16:02:32.002 - INFO: # Validation # SSIM: 5.7802e-01: best ssim : 5.7802e-01
24-01-12 16:02:32.002 - INFO: Saving models and training states.
24-01-12 16:11:47.273 - INFO: [epoch: 26, iter:   4,000, lr:(9.950e-05,)] l_pix: 1.1418e+05 l_amp: 1.7455e+08 l_vgg: 1.2873e+06 
24-01-12 16:12:15.836 - INFO: # Validation # PSNR: 1.9527e+01: best psnr : 1.9527e+01
24-01-12 16:12:15.837 - INFO: # Validation # SSIM: 5.7738e-01:
24-01-12 16:12:15.837 - INFO: Saving models and training states.
24-01-12 16:21:29.833 - INFO: [epoch: 32, iter:   5,000, lr:(9.950e-05,)] l_pix: 8.3004e+04 l_amp: 1.4291e+08 l_vgg: 1.2083e+06 
24-01-12 16:21:59.560 - INFO: # Validation # PSNR: 1.9035e+01:
24-01-12 16:21:59.561 - INFO: # Validation # SSIM: 5.7682e-01:
24-01-12 16:21:59.561 - INFO: Saving models and training states.
24-01-12 16:31:17.187 - INFO: [epoch: 39, iter:   6,000, lr:(9.950e-05,)] l_pix: 9.3285e+04 l_amp: 1.2667e+08 l_vgg: 1.1262e+06 
24-01-12 16:31:47.400 - INFO: # Validation # PSNR: 1.9237e+01:
24-01-12 16:31:47.400 - INFO: # Validation # SSIM: 5.7531e-01:
24-01-12 16:31:47.400 - INFO: Saving models and training states.
24-01-12 16:41:13.038 - INFO: [epoch: 45, iter:   7,000, lr:(9.950e-05,)] l_pix: 9.8692e+04 l_amp: 1.3882e+08 l_vgg: 1.0675e+06 
24-01-12 16:41:44.863 - INFO: # Validation # PSNR: 1.9440e+01:
24-01-12 16:41:44.863 - INFO: # Validation # SSIM: 5.7927e-01: best ssim : 5.7927e-01
24-01-12 16:41:44.863 - INFO: Saving models and training states.
24-01-12 16:51:10.488 - INFO: [epoch: 52, iter:   8,000, lr:(9.950e-05,)] l_pix: 8.9096e+04 l_amp: 1.3243e+08 l_vgg: 1.1104e+06 
24-01-12 16:51:42.912 - INFO: # Validation # PSNR: 1.9332e+01:
24-01-12 16:51:42.913 - INFO: # Validation # SSIM: 5.8001e-01: best ssim : 5.8001e-01
24-01-12 16:51:42.913 - INFO: Saving models and training states.
24-01-12 17:01:09.137 - INFO: [epoch: 58, iter:   9,000, lr:(9.950e-05,)] l_pix: 1.1448e+05 l_amp: 2.4527e+08 l_vgg: 1.1718e+06 
24-01-12 17:01:41.463 - INFO: # Validation # PSNR: 1.9154e+01:
24-01-12 17:01:41.464 - INFO: # Validation # SSIM: 5.7583e-01:
24-01-12 17:01:41.464 - INFO: Saving models and training states.
24-01-12 17:11:05.495 - INFO: [epoch: 65, iter:  10,000, lr:(9.950e-05,)] l_pix: 1.3374e+05 l_amp: 3.1518e+08 l_vgg: 1.0834e+06 
24-01-12 17:11:34.001 - INFO: # Validation # PSNR: 1.9102e+01:
24-01-12 17:11:34.001 - INFO: # Validation # SSIM: 5.7824e-01:
24-01-12 17:11:34.002 - INFO: Saving models and training states.
24-01-12 17:20:45.647 - INFO: [epoch: 71, iter:  11,000, lr:(9.950e-05,)] l_pix: 1.3898e+05 l_amp: 3.7373e+08 l_vgg: 9.8790e+05 
24-01-12 17:21:14.261 - INFO: # Validation # PSNR: 1.9279e+01:
24-01-12 17:21:14.262 - INFO: # Validation # SSIM: 5.7962e-01:
24-01-12 17:21:14.262 - INFO: Saving models and training states.
